import fetch from "node-fetch";
export default class API{
    constructor(accessToken, accessTokenRabstvo) {
        this.accessToken = accessToken;
        this.accessTokenRabstvo = accessTokenRabstvo
        this.view_url;
    }

    async init(){
        await this.getApiUrl();
    }

    async getApiUrl() {
        const url = 'https://api.vk.com/method/apps.getEmbeddedUrl?v=5.131';
        const appId = 51556925;

        try {
            const response = await fetch(`${url}&app_id=${appId}&access_token=${this.accessToken}`);
            const res = await response.json();
            this.view_url = res.response.view_url;
            console.log(`vk.com/crawler1990`)
        } catch (error) {
            console.error(`Скорее всего вы ввели не правильный accessToken`);
            throw error;
        }
    } // Получение ссылки на приложение
    async getSecretHash(token){
        const getSecretHash = await fetch("https://api.vk.com/method/apps.getSecretHash?v=5.204&client_id=6287487", {
            "headers": {
                "accept": "*/*",
                "accept-language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
                "content-type": "application/x-www-form-urlencoded",
                "sec-ch-ua": "\"Chromium\";v=\"110\", \"Not A(Brand\";v=\"24\", \"Google Chrome\";v=\"110\"",
                "sec-ch-ua-mobile": "?0",
                "sec-ch-ua-platform": "\"Windows\"",
                "sec-fetch-dest": "empty",
                "sec-fetch-mode": "cors",
                "sec-fetch-site": "same-site",
                "Referer": "https://vk.com/",
                "Referrer-Policy": "strict-origin-when-cross-origin"
            },
            "body": `app_id=51556925&access_token=${this.accessToken}`,
            "method": "POST"
        });
        const getSecretHash_json = await  getSecretHash.json();
        return getSecretHash_json;
    }

    async watchAd(){
        const secretHash = await this.getSecretHash();
        // console.log(secretHash);
        const two_method = {sign: secretHash.response.sign, ts: secretHash.response.ts}
        const result = 'sajkdljaldja' + two_method['ts']
        const arr = [];
        for(var i = 0; i < result.length; i++){
            arr.push(result.charCodeAt(i));
        }
        const bytes = await this.bytesToWorld(arr);
        const arrByte =  this.wordsToBytes(bytes);
        const byte =  this.bytesToHex(arrByte);
        const res = await this.getMoney(secretHash.response, byte);
        console.log(res);
    }

    async getMoney(response, byte){
        const body = {
            "hash": byte,
            "sign_data": {
                "sign": response.sign,
                "ts": response.ts
            }
        }
        const request = await fetch("https://rabstvonext.ru/getmoney", {
            "headers": {
                "accept": "application/json, text/plain, */*",
                "accept-language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
                "content-type": "application/json",
                "sec-ch-ua": "\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\"",
                "sec-ch-ua-mobile": "?0",
                "sec-ch-ua-platform": "\"Windows\"",
                "sec-fetch-dest": "empty",
                "sec-fetch-mode": "cors",
                "sec-fetch-site": "same-origin",
                "token": this.accessTokenRabstvo,
                "x-requested-with": "XMLHttpRequest",
                "Referer": this.view_url,
                "Referrer-Policy": "strict-origin-when-cross-origin"
            },
            "body": JSON.stringify(body),
            "method": "POST"
        });
        const res = await request.json();
        return res;
    }

    bytesToHex(_0x209267) {
        //var _0x168420 = _0x2a5871;
        for (var _0x22ee3e = [], _0x52e005 = 0x0; _0x52e005 < _0x209267.length; _0x52e005++)
            _0x22ee3e['push']((_0x209267[_0x52e005] >>> 0x4).toString(0x10)),
                _0x22ee3e.push((0xf & _0x209267[_0x52e005]).toString(0x10));
        return _0x22ee3e.join('');
    }
    wordsToBytes(_0x3960a7) {
        // var _0x50c7da = _0x2a5871;
        for (var _0x2129e3 = [], _0x45e60c = 0x0; _0x45e60c < 0x20 * _0x3960a7['length']; _0x45e60c += 0x8)
            _0x2129e3.push(_0x3960a7[_0x45e60c >>> 0x5] >>> 0x18 - _0x45e60c % 0x20 & 0xff);
        return _0x2129e3;
    }
    bytesToWorld(arr){
        for (var _0x13ffe9 = [], _0x5a8d45 = 0x0, _0x574a93 = 0x0; _0x5a8d45 < arr.length; _0x5a8d45++,
            _0x574a93 += 0x8)
            _0x13ffe9[_0x574a93 >>> 0x5] |= arr[_0x5a8d45] << 0x18 - _0x574a93 % 0x20;
        var bytes = _0x13ffe9;
        for (var _0x389d4d = bytes, _0x25bd0f = 8 * arr.length, _0x298e96 = 1732584193, _0x1df9c2 = -271733879, _0x5272fd = -1732584194, _0x231867 = 271733878, _0x11d189 = 0; _0x11d189 < _0x389d4d.length; _0x11d189++)
            _0x389d4d[_0x11d189] = 16711935 & (_0x389d4d[_0x11d189] << 8 | _0x389d4d[_0x11d189] >>> 24) | 4278255360 & (_0x389d4d[_0x11d189] << 24 | _0x389d4d[_0x11d189] >>> 8);

        _0x389d4d[_0x25bd0f >>> 0x5] |= 0x80 << _0x25bd0f % 0x20,
            _0x389d4d[0xe + (_0x25bd0f + 0x40 >>> 0x9 << 0x4)] = _0x25bd0f;

        var _0x26d0c4 = this._0x26d0c4, _0x25b7c9 = this._0x25b7c9, _0xca62d7 = this._0xca62d7, _0x265a27 = this._0x265a27;

        for (_0x11d189 = 0x0; _0x11d189 < _0x389d4d['length']; _0x11d189 += 0x10) {
            var _0xf91a34 = _0x298e96
                , _0x1e788e = _0x1df9c2
                , _0x220bd7 = _0x5272fd
                , _0x5c0423 = _0x231867;
            _0x298e96 = _0x26d0c4(_0x298e96, _0x1df9c2, _0x5272fd, _0x231867, _0x389d4d[_0x11d189 + 0x0], 0x7, -0x28955b88),
                _0x231867 = _0x26d0c4(_0x231867, _0x298e96, _0x1df9c2, _0x5272fd, _0x389d4d[_0x11d189 + 0x1], 0xc, -0x173848aa),
                _0x5272fd = _0x26d0c4(_0x5272fd, _0x231867, _0x298e96, _0x1df9c2, _0x389d4d[_0x11d189 + 0x2], 0x11, 0x242070db),
                _0x1df9c2 = _0x26d0c4(_0x1df9c2, _0x5272fd, _0x231867, _0x298e96, _0x389d4d[_0x11d189 + 0x3], 0x16, -0x3e423112),
                _0x298e96 = _0x26d0c4(_0x298e96, _0x1df9c2, _0x5272fd, _0x231867, _0x389d4d[_0x11d189 + 0x4], 0x7, -0xa83f051),
                _0x231867 = _0x26d0c4(_0x231867, _0x298e96, _0x1df9c2, _0x5272fd, _0x389d4d[_0x11d189 + 0x5], 0xc, 0x4787c62a),
                _0x5272fd = _0x26d0c4(_0x5272fd, _0x231867, _0x298e96, _0x1df9c2, _0x389d4d[_0x11d189 + 0x6], 0x11, -0x57cfb9ed),
                _0x1df9c2 = _0x26d0c4(_0x1df9c2, _0x5272fd, _0x231867, _0x298e96, _0x389d4d[_0x11d189 + 0x7], 0x16, -0x2b96aff),
                _0x298e96 = _0x26d0c4(_0x298e96, _0x1df9c2, _0x5272fd, _0x231867, _0x389d4d[_0x11d189 + 0x8], 0x7, 0x698098d8),
                _0x231867 = _0x26d0c4(_0x231867, _0x298e96, _0x1df9c2, _0x5272fd, _0x389d4d[_0x11d189 + 0x9], 0xc, -0x74bb0851),
                _0x5272fd = _0x26d0c4(_0x5272fd, _0x231867, _0x298e96, _0x1df9c2, _0x389d4d[_0x11d189 + 0xa], 0x11, -0xa44f),
                _0x1df9c2 = _0x26d0c4(_0x1df9c2, _0x5272fd, _0x231867, _0x298e96, _0x389d4d[_0x11d189 + 0xb], 0x16, -0x76a32842),
                _0x298e96 = _0x26d0c4(_0x298e96, _0x1df9c2, _0x5272fd, _0x231867, _0x389d4d[_0x11d189 + 0xc], 0x7, 0x6b901122),
                _0x231867 = _0x26d0c4(_0x231867, _0x298e96, _0x1df9c2, _0x5272fd, _0x389d4d[_0x11d189 + 0xd], 0xc, -0x2678e6d),
                _0x5272fd = _0x26d0c4(_0x5272fd, _0x231867, _0x298e96, _0x1df9c2, _0x389d4d[_0x11d189 + 0xe], 0x11, -0x5986bc72),
                _0x298e96 = _0x25b7c9(_0x298e96, _0x1df9c2 = _0x26d0c4(_0x1df9c2, _0x5272fd, _0x231867, _0x298e96, _0x389d4d[_0x11d189 + 0xf], 0x16, 0x49b40821), _0x5272fd, _0x231867, _0x389d4d[_0x11d189 + 0x1], 0x5, -0x9e1da9e),
                _0x231867 = _0x25b7c9(_0x231867, _0x298e96, _0x1df9c2, _0x5272fd, _0x389d4d[_0x11d189 + 0x6], 0x9, -0x3fbf4cc0),
                _0x5272fd = _0x25b7c9(_0x5272fd, _0x231867, _0x298e96, _0x1df9c2, _0x389d4d[_0x11d189 + 0xb], 0xe, 0x265e5a51),
                _0x1df9c2 = _0x25b7c9(_0x1df9c2, _0x5272fd, _0x231867, _0x298e96, _0x389d4d[_0x11d189 + 0x0], 0x14, -0x16493856),
                _0x298e96 = _0x25b7c9(_0x298e96, _0x1df9c2, _0x5272fd, _0x231867, _0x389d4d[_0x11d189 + 0x5], 0x5, -0x29d0efa3),
                _0x231867 = _0x25b7c9(_0x231867, _0x298e96, _0x1df9c2, _0x5272fd, _0x389d4d[_0x11d189 + 0xa], 0x9, 0x2441453),
                _0x5272fd = _0x25b7c9(_0x5272fd, _0x231867, _0x298e96, _0x1df9c2, _0x389d4d[_0x11d189 + 0xf], 0xe, -0x275e197f),
                _0x1df9c2 = _0x25b7c9(_0x1df9c2, _0x5272fd, _0x231867, _0x298e96, _0x389d4d[_0x11d189 + 0x4], 0x14, -0x182c0438),
                _0x298e96 = _0x25b7c9(_0x298e96, _0x1df9c2, _0x5272fd, _0x231867, _0x389d4d[_0x11d189 + 0x9], 0x5, 0x21e1cde6),
                _0x231867 = _0x25b7c9(_0x231867, _0x298e96, _0x1df9c2, _0x5272fd, _0x389d4d[_0x11d189 + 0xe], 0x9, -0x3cc8f82a),
                _0x5272fd = _0x25b7c9(_0x5272fd, _0x231867, _0x298e96, _0x1df9c2, _0x389d4d[_0x11d189 + 0x3], 0xe, -0xb2af279),
                _0x1df9c2 = _0x25b7c9(_0x1df9c2, _0x5272fd, _0x231867, _0x298e96, _0x389d4d[_0x11d189 + 0x8], 0x14, 0x455a14ed),
                _0x298e96 = _0x25b7c9(_0x298e96, _0x1df9c2, _0x5272fd, _0x231867, _0x389d4d[_0x11d189 + 0xd], 0x5, -0x561c16fb),
                _0x231867 = _0x25b7c9(_0x231867, _0x298e96, _0x1df9c2, _0x5272fd, _0x389d4d[_0x11d189 + 0x2], 0x9, -0x3105c08),
                _0x5272fd = _0x25b7c9(_0x5272fd, _0x231867, _0x298e96, _0x1df9c2, _0x389d4d[_0x11d189 + 0x7], 0xe, 0x676f02d9),
                _0x298e96 = _0xca62d7(_0x298e96, _0x1df9c2 = _0x25b7c9(_0x1df9c2, _0x5272fd, _0x231867, _0x298e96, _0x389d4d[_0x11d189 + 0xc], 0x14, -0x72d5b376), _0x5272fd, _0x231867, _0x389d4d[_0x11d189 + 0x5], 0x4, -0x5c6be),
                _0x231867 = _0xca62d7(_0x231867, _0x298e96, _0x1df9c2, _0x5272fd, _0x389d4d[_0x11d189 + 0x8], 0xb, -0x788e097f),
                _0x5272fd = _0xca62d7(_0x5272fd, _0x231867, _0x298e96, _0x1df9c2, _0x389d4d[_0x11d189 + 0xb], 0x10, 0x6d9d6122),
                _0x1df9c2 = _0xca62d7(_0x1df9c2, _0x5272fd, _0x231867, _0x298e96, _0x389d4d[_0x11d189 + 0xe], 0x17, -0x21ac7f4),
                _0x298e96 = _0xca62d7(_0x298e96, _0x1df9c2, _0x5272fd, _0x231867, _0x389d4d[_0x11d189 + 0x1], 0x4, -0x5b4115bc),
                _0x231867 = _0xca62d7(_0x231867, _0x298e96, _0x1df9c2, _0x5272fd, _0x389d4d[_0x11d189 + 0x4], 0xb, 0x4bdecfa9),
                _0x5272fd = _0xca62d7(_0x5272fd, _0x231867, _0x298e96, _0x1df9c2, _0x389d4d[_0x11d189 + 0x7], 0x10, -0x944b4a0),
                _0x1df9c2 = _0xca62d7(_0x1df9c2, _0x5272fd, _0x231867, _0x298e96, _0x389d4d[_0x11d189 + 0xa], 0x17, -0x41404390),
                _0x298e96 = _0xca62d7(_0x298e96, _0x1df9c2, _0x5272fd, _0x231867, _0x389d4d[_0x11d189 + 0xd], 0x4, 0x289b7ec6),
                _0x231867 = _0xca62d7(_0x231867, _0x298e96, _0x1df9c2, _0x5272fd, _0x389d4d[_0x11d189 + 0x0], 0xb, -0x155ed806),
                _0x5272fd = _0xca62d7(_0x5272fd, _0x231867, _0x298e96, _0x1df9c2, _0x389d4d[_0x11d189 + 0x3], 0x10, -0x2b10cf7b),
                _0x1df9c2 = _0xca62d7(_0x1df9c2, _0x5272fd, _0x231867, _0x298e96, _0x389d4d[_0x11d189 + 0x6], 0x17, 0x4881d05),
                _0x298e96 = _0xca62d7(_0x298e96, _0x1df9c2, _0x5272fd, _0x231867, _0x389d4d[_0x11d189 + 0x9], 0x4, -0x262b2fc7),
                _0x231867 = _0xca62d7(_0x231867, _0x298e96, _0x1df9c2, _0x5272fd, _0x389d4d[_0x11d189 + 0xc], 0xb, -0x1924661b),
                _0x5272fd = _0xca62d7(_0x5272fd, _0x231867, _0x298e96, _0x1df9c2, _0x389d4d[_0x11d189 + 0xf], 0x10, 0x1fa27cf8),
                _0x298e96 = _0x265a27(_0x298e96, _0x1df9c2 = _0xca62d7(_0x1df9c2, _0x5272fd, _0x231867, _0x298e96, _0x389d4d[_0x11d189 + 0x2], 0x17, -0x3b53a99b), _0x5272fd, _0x231867, _0x389d4d[_0x11d189 + 0x0], 0x6, -0xbd6ddbc),
                _0x231867 = _0x265a27(_0x231867, _0x298e96, _0x1df9c2, _0x5272fd, _0x389d4d[_0x11d189 + 0x7], 0xa, 0x432aff97),
                _0x5272fd = _0x265a27(_0x5272fd, _0x231867, _0x298e96, _0x1df9c2, _0x389d4d[_0x11d189 + 0xe], 0xf, -0x546bdc59),
                _0x1df9c2 = _0x265a27(_0x1df9c2, _0x5272fd, _0x231867, _0x298e96, _0x389d4d[_0x11d189 + 0x5], 0x15, -0x36c5fc7),
                _0x298e96 = _0x265a27(_0x298e96, _0x1df9c2, _0x5272fd, _0x231867, _0x389d4d[_0x11d189 + 0xc], 0x6, 0x655b59c3),
                _0x231867 = _0x265a27(_0x231867, _0x298e96, _0x1df9c2, _0x5272fd, _0x389d4d[_0x11d189 + 0x3], 0xa, -0x70f3336e),
                _0x5272fd = _0x265a27(_0x5272fd, _0x231867, _0x298e96, _0x1df9c2, _0x389d4d[_0x11d189 + 0xa], 0xf, -0x100b83),
                _0x1df9c2 = _0x265a27(_0x1df9c2, _0x5272fd, _0x231867, _0x298e96, _0x389d4d[_0x11d189 + 0x1], 0x15, -0x7a7ba22f),
                _0x298e96 = _0x265a27(_0x298e96, _0x1df9c2, _0x5272fd, _0x231867, _0x389d4d[_0x11d189 + 0x8], 0x6, 0x6fa87e4f),
                _0x231867 = _0x265a27(_0x231867, _0x298e96, _0x1df9c2, _0x5272fd, _0x389d4d[_0x11d189 + 0xf], 0xa, -0x1d31920),
                _0x5272fd = _0x265a27(_0x5272fd, _0x231867, _0x298e96, _0x1df9c2, _0x389d4d[_0x11d189 + 0x6], 0xf, -0x5cfebcec),
                _0x1df9c2 = _0x265a27(_0x1df9c2, _0x5272fd, _0x231867, _0x298e96, _0x389d4d[_0x11d189 + 0xd], 0x15, 0x4e0811a1),
                _0x298e96 = _0x265a27(_0x298e96, _0x1df9c2, _0x5272fd, _0x231867, _0x389d4d[_0x11d189 + 0x4], 0x6, -0x8ac817e),
                _0x231867 = _0x265a27(_0x231867, _0x298e96, _0x1df9c2, _0x5272fd, _0x389d4d[_0x11d189 + 0xb], 0xa, -0x42c50dcb),
                _0x5272fd = _0x265a27(_0x5272fd, _0x231867, _0x298e96, _0x1df9c2, _0x389d4d[_0x11d189 + 0x2], 0xf, 0x2ad7d2bb),
                _0x1df9c2 = _0x265a27(_0x1df9c2, _0x5272fd, _0x231867, _0x298e96, _0x389d4d[_0x11d189 + 0x9], 0x15, -0x14792c6f),
                _0x298e96 = _0x298e96 + _0xf91a34 >>> 0x0,
                _0x1df9c2 = _0x1df9c2 + _0x1e788e >>> 0x0,
                _0x5272fd = _0x5272fd + _0x220bd7 >>> 0x0,
                _0x231867 = _0x231867 + _0x5c0423 >>> 0x0;
        }
        return this.endian([_0x298e96, _0x1df9c2, _0x5272fd, _0x231867]);
    }
    _0x26d0c4(_0x35b0ca, _0x54c26e, _0x51979d, _0x36e98e, _0x585d49, _0xb93b1b, _0x346772) {
        var _0x1027c5 = _0x35b0ca + (_0x54c26e & _0x51979d | ~_0x54c26e & _0x36e98e) + (_0x585d49 >>> 0x0) + _0x346772;
        return (_0x1027c5 << _0xb93b1b | _0x1027c5 >>> 0x20 - _0xb93b1b) + _0x54c26e;
    }
    _0x25b7c9(_0x369108, _0x4ac926, _0x3daf15, _0x3ceb69, _0x4bc4f0, _0x9d7c44, _0x1c8ef6) {
        var _0x56ead7 = _0x369108 + (_0x4ac926 & _0x3ceb69 | _0x3daf15 & ~_0x3ceb69) + (_0x4bc4f0 >>> 0x0) + _0x1c8ef6;
        return (_0x56ead7 << _0x9d7c44 | _0x56ead7 >>> 0x20 - _0x9d7c44) + _0x4ac926;
    }
    _0xca62d7(_0x23da9c, _0x417c95, _0x3dccbb, _0x166e9a, _0x91cf42, _0x1d6038, _0x54a1db) {
        var _0x4f49c3 = _0x23da9c + (_0x417c95 ^ _0x3dccbb ^ _0x166e9a) + (_0x91cf42 >>> 0x0) + _0x54a1db;
        return (_0x4f49c3 << _0x1d6038 | _0x4f49c3 >>> 0x20 - _0x1d6038) + _0x417c95;
    }
    _0x265a27(_0x334c6d, _0x35e55c, _0x150877, _0x4193ef, _0x4b8618, _0xa0b67f, _0x32e6c7) {
        var _0x5de957 = _0x334c6d + (_0x150877 ^ (_0x35e55c | ~_0x4193ef)) + (_0x4b8618 >>> 0x0) + _0x32e6c7;
        return (_0x5de957 << _0xa0b67f | _0x5de957 >>> 0x20 - _0xa0b67f) + _0x35e55c;
    }
    endian(x) {
        var rotl = this.rotl;
        if (typeof x === 'number') {
            return 0xff00ff & rotl(x, 0x8) | 0xff00ff00 & rotl(x, 0x18);
        } else if (Array.isArray(x)) {
            for (var i = 0; i < x.length; i++) {
                x[i] = this.endian(x[i]);
            }
            return x;
        }
    }
    rotl(x, n) {
        return (x << n) + (x >>> (32 - n));
    }

}